{
    "manifests": {
        "mformono/docker": {
            "manifest": {
                "copy-from-recipe": {
                    "continue/": ".continue/",
                    "etc/": "etc/",
                    "dockerignore": ".dockerignore",
                    "compose.yaml": "compose.yaml",
                    "Dockerfile": "Dockerfile"
                },
                "add-lines": [
                    {
                        "file": ".editorconfig",
                        "content": "[docker-compose{,.override}.{yaml,yml}]\n[compose{,.override}.yaml]\nindent_size = 2",
                        "position": "bottom",
                        "warn_if_missing": true
                    }
                ],
                "gitignore": [
                    "/compose.override.yaml"
                ]
            },
            "files": {
                "Dockerfile": {
                    "contents": [
                        "# syntax=docker/dockerfile:1\r",
                        "\r",
                        "# See: https://php.watch/versions\r",
                        "ARG PHP_VERSION=8.4.8\r",
                        "\r",
                        "# User and group settings\r",
                        "ARG APP_UID=1000\r",
                        "ARG APP_GID=${APP_UID}\r",
                        "\r",
                        "#######\r",
                        "# App #\r",
                        "#######\r",
                        "\r",
                        "FROM php:${PHP_VERSION}-fpm-bookworm AS app\r",
                        "\r",
                        "# See: https://nodejs.org/en/about/previous-releases\r",
                        "ARG NODE_VERSION=24.3.0\r",
                        "# See: https://github.com/composer/composer/releases\r",
                        "ARG COMPOSER_VERSION=2.8.9\r",
                        "# See: https://github.com/mlocati/docker-php-extension-installer/releases\r",
                        "ARG PHP_EXTENSION_INSTALLER_VERSION=2.8.2\r",
                        "\r",
                        "# OpenContainers labels\r",
                        "LABEL org.opencontainers.image.title=\"MforMono Skeleton\"\r",
                        "LABEL org.opencontainers.image.description=\"A customised Symfony project to create bare bones applications with php recipes\"\r",
                        "LABEL org.opencontainers.image.authors=\"Alexandre Balmes\"\r",
                        "LABEL org.opencontainers.image.source=\"https://github.com/mformono/skeleton\"\r",
                        "\r",
                        "# User and group settings (must be redeclared after FROM)\r",
                        "ARG APP_UID\r",
                        "ARG APP_GID\r",
                        "\r",
                        "SHELL [\"/bin/bash\", \"-e\", \"-o\", \"pipefail\", \"-c\"]\r",
                        "\r",
                        "# Install system packages\r",
                        "RUN <<EOF\r",
                        "\r",
                        "# Node Repository\r",
                        "curl -sSLf https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key \\\r",
                        "    --output /etc/apt/keyrings/node.asc\r",
                        "printf \"\\\r",
                        "Types: deb\\n\\\r",
                        "URIs: https://deb.nodesource.com/node_$(echo ${NODE_VERSION} | cut -d. -f1).x\\n\\\r",
                        "Suites: nodistro\\n\\\r",
                        "Components: main\\n\\\r",
                        "Signed-By: /etc/apt/keyrings/node.asc\\n\\\r",
                        "\" > /etc/apt/sources.list.d/node.sources\r",
                        "printf \"\\\r",
                        "Package: nodejs\\n\\\r",
                        "Pin: version ${NODE_VERSION}-*\\n\\\r",
                        "Pin-Priority: 1000\\n\\\r",
                        "\" > /etc/apt/preferences.d/node\r",
                        "\r",
                        "apt-get update --quiet\r",
                        "apt-get upgrade --quiet --yes --purge\r",
                        "apt-get install --quiet --yes --no-install-recommends --verbose-versions \\\r",
                        "    bash \\\r",
                        "    dumb-init \\\r",
                        "    git \\\r",
                        "    nodejs \\\r",
                        "    npm \\\r",
                        "    sudo \\\r",
                        "    wget \\\r",
                        "    zip \\\r",
                        "    unzip\r",
                        "apt-get clean\r",
                        "rm -rf /var/lib/apt/lists/*\r",
                        "\r",
                        "# Create app user and group\r",
                        "addgroup --gid ${APP_GID} app\r",
                        "adduser --home /home/app --shell /bin/bash --uid ${APP_UID} --gecos app --ingroup app --disabled-password app\r",
                        "\r",
                        "# Add app user to sudoers\r",
                        "echo \"app ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/app\r",
                        "\r",
                        "# App\r",
                        "install --verbose --owner app --group app --mode 0755 --directory /app\r",
                        "\r",
                        "# Install PHP extensions installer\r",
                        "curl -sSLf https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions \\\r",
                        "    --output /usr/local/bin/install-php-extensions\r",
                        "\r",
                        "chmod +x /usr/local/bin/install-php-extensions\r",
                        "\r",
                        "# Install PHP extensions\r",
                        "install-php-extensions \\\r",
                        "    @composer-${COMPOSER_VERSION} \\\r",
                        "    intl \\\r",
                        "    opcache \\\r",
                        "    pcntl \\\r",
                        "    xsl \\\r",
                        "    zip\r",
                        "EOF\r",
                        "\r",
                        "###> recipes ###\r",
                        "###< recipes ###\r",
                        "\r",
                        "# Set working directory\r",
                        "WORKDIR /app\r",
                        "\r",
                        "# Official php images comes with SIGQUIT as stop signal to shut down fpm gracefully (see: https://github.com/docker-library/php/pull/816)\r",
                        "# For a more generic way to use this image, set the default SIGTERM docker stop signal.\r",
                        "STOPSIGNAL SIGTERM\r",
                        "\r",
                        "# Copy entrypoint scripts\r",
                        "COPY --link --chmod=755 etc/docker/entrypoints/* /usr/local/bin/\r",
                        "ENTRYPOINT [\"app-entrypoint\"]\r",
                        "\r",
                        "#############\r",
                        "# App - Dev #\r",
                        "#############\r",
                        "\r",
                        "FROM app AS app_dev\r",
                        "\r",
                        "# Install Xdebug\r",
                        "RUN <<EOF\r",
                        "    install-php-extensions xdebug\r",
                        "EOF\r",
                        "\r",
                        "# Set Xdebug mode to off by default (can be enabled via docker-compose)\r",
                        "ENV XDEBUG_MODE=\"off\"\r",
                        "\r",
                        "# Install Symfony CLI for development using heredoc\r",
                        "RUN <<EOF\r",
                        "    wget https://get.symfony.com/cli/installer -O - | bash\r",
                        "    mv /root/.symfony5/bin/symfony /usr/local/bin/symfony\r",
                        "    chown app:app /usr/local/bin/symfony\r",
                        "EOF\r",
                        "\r",
                        "USER app\r",
                        "\r",
                        "##############\r",
                        "# App - Prod #\r",
                        "##############\r",
                        "\r",
                        "FROM app AS app_prod\r",
                        "\r",
                        "ENV APP_ENV=prod\r",
                        "\r",
                        ""
                    ],
                    "executable": false
                },
                "compose.yaml": {
                    "contents": [
                        "services:\r",
                        "\r",
                        "  #######\r",
                        "  # App #\r",
                        "  #######\r",
                        "\r",
                        "  app:\r",
                        "    hostname: app\r",
                        "    build:\r",
                        "      target: app_dev\r",
                        "      args:\r",
                        "        - APP_UID=${APP_UID:-1000}\r",
                        "        - APP_GID=${APP_GID:-1000}\r",
                        "    entrypoint: app-php-entrypoint\r",
                        "    volumes:\r",
                        "      - ./etc/docker/php/conf.d/app.dev.ini:/usr/local/etc/php/conf.d/zz-app.ini:ro\r",
                        "      - ./etc/docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/zz-xdebug.ini:ro\r",
                        "      - ./etc/docker/php/fpm.d/www.dev.conf:/usr/local/etc/php-fpm.d/zz-www.conf:ro\r",
                        "      - .:/app\r",
                        "    environment:\r",
                        "      - XDEBUG_MODE=off\r",
                        "      - XDEBUG_CLIENT_HOST=host.docker.internal\r",
                        "      - XDEBUG_CLIENT_PORT=9003\r",
                        "\r",
                        "  app_test:\r",
                        "    hostname: app_test\r",
                        "    build:\r",
                        "      target: app_dev\r",
                        "      args:\r",
                        "        - APP_UID=${APP_UID:-1000}\r",
                        "        - APP_GID=${APP_GID:-1000}\r",
                        "    entrypoint: app-php-entrypoint\r",
                        "    volumes:\r",
                        "      - ./etc/docker/php/conf.d/app.dev.ini:/usr/local/etc/php/conf.d/zz-app.ini:ro\r",
                        "      - ./etc/docker/php/fpm.d/www.dev.conf:/usr/local/etc/php-fpm.d/zz-www.conf:ro\r",
                        "      - .:/app\r",
                        "    environment:\r",
                        "      APP_ENV: \"test\""
                    ],
                    "executable": false
                },
                "continue/docker-php-best-practices.md": {
                    "contents": [
                        "---",
                        "globs: \"*Dockerfile*,docker/php/**/*,docker/entrypoints/*,compose.yaml\"",
                        "description: Specialized Docker conventions for PHP and Symfony applications.",
                        "  These rules ensure optimal PHP configuration, proper development and",
                        "  production environments, efficient dependency management, and adherence to",
                        "  Symfony best practices in containerized environments.",
                        "---",
                        "",
                        "# PHP/Symfony Docker Best Practices",
                        "",
                        "1. Use official PHP images as base (php:X.Y-fpm-distribution).",
                        "2. Use Debian-based images (bookworm) for better compatibility with PHP extensions.",
                        "3. Use install-php-extensions script for PHP extension installation.",
                        "4. Install specific PHP extensions required for Symfony:",
                        "   - intl: for internationalization",
                        "   - opcache: for performance optimization",
                        "   - pcntl: for process control",
                        "   - xsl: for XML transformations",
                        "   - zip: for package handling",
                        "5. Install composer with a pinned version using @composer-X.Y.Z syntax.",
                        "6. Install dev tools like Xdebug only in the development image.",
                        "7. Control Xdebug via environment variables (XDEBUG_MODE, XDEBUG_CLIENT_HOST, etc.).",
                        "8. Configure optimal PHP settings for development vs. production environments.",
                        "9. Move the production php.ini into place in the production image.",
                        "10. Configure opcache for production with:",
                        "    - opcache.validate_timestamps=0",
                        "    - opcache.memory_consumption=128",
                        "    - opcache.max_accelerated_files=10000",
                        "11. Install Symfony CLI only in the development image.",
                        "12. Use dumb-init to properly handle process signals in containerized PHP applications.",
                        "13. Implement a custom entrypoint that installs Composer and NPM dependencies if not present.",
                        "14. Mount custom PHP configuration files (like xdebug.ini) as read-only volumes.",
                        "15. Organize PHP configuration files in etc/docker/php/conf.d/ directory.",
                        "16. Set APP_ENV environment variable appropriately for each environment."
                    ],
                    "executable": false
                },
                "dockerignore": {
                    "contents": [
                        "**/.editorconfig\r",
                        "docs/\r",
                        "drivers/\r",
                        "node_modules/\r",
                        "npm-cache/\r",
                        "public/assets/\r",
                        "public/bundles/\r",
                        "public/themes/\r",
                        "tests/\r",
                        "var/\r",
                        "vendor/\r",
                        ".dockerignore\r",
                        ".env*\r",
                        "!.env\r",
                        "!.env.prod\r",
                        ".git*\r",
                        ".php*\r",
                        ".twig*\r",
                        "auth.json\r",
                        ""
                    ],
                    "executable": false
                },
                "etc/docker/entrypoints/app-entrypoint": {
                    "contents": [
                        "#!/bin/sh",
                        "set -e",
                        "",
                        "# Default command",
                        "if [ \"$#\" -eq 0 ]; then",
                        "  set -- bash",
                        "fi",
                        "",
                        "# Execute the command passed to the entrypoint",
                        "exec \"$@\""
                    ],
                    "executable": false
                },
                "etc/docker/entrypoints/app-php-entrypoint": {
                    "contents": [
                        "#!/bin/sh",
                        "set -e",
                        "",
                        "# Production",
                        "if [ \"$APP_ENV\" = \"prod\" ]; then",
                        "  bin/console cache:warmup",
                        "fi",
                        "",
                        "# Default command",
                        "if [ \"$#\" -eq 0 ]; then",
                        "  set -- dumb-init --rewrite 15:3 php-fpm",
                        "fi",
                        "",
                        "exec \"$@\""
                    ],
                    "executable": false
                },
                "etc/docker/php/conf.d/app.dev.ini": {
                    "contents": [
                        "; OPCache",
                        "; See: http://symfony.com/doc/current/performance.html",
                        "opcache.memory_consumption = 256",
                        "opcache.max_accelerated_files = 20000",
                        "",
                        "; Realpath Cache",
                        "; See: http://symfony.com/doc/current/performance.html",
                        "realpath_cache_size = 4096K",
                        "realpath_cache_ttl = 600",
                        "",
                        "; App",
                        "date.timezone = UTC",
                        "memory_limit = 256M"
                    ],
                    "executable": false
                },
                "etc/docker/php/conf.d/xdebug.ini": {
                    "contents": [
                        "[xdebug]",
                        "xdebug.mode=${XDEBUG_MODE}",
                        "xdebug.client_host=${XDEBUG_CLIENT_HOST}",
                        "xdebug.client_port=${XDEBUG_CLIENT_PORT}",
                        "xdebug.start_with_request=yes",
                        "xdebug.log=/tmp/xdebug.log",
                        "xdebug.idekey=PHPSTORM"
                    ],
                    "executable": false
                },
                "etc/docker/php/fpm.d/www.dev.conf": {
                    "contents": [
                        "[www]",
                        "",
                        "; 'user' and 'group' directives are ignored when FPM is not running as root",
                        "user =",
                        "group =",
                        "",
                        "; Choose how the process manager will control the number of child processes",
                        "pm = static",
                        "pm.max_children = 5"
                    ],
                    "executable": false
                }
            },
            "ref": "ba79ff90a557717b8173a3e102c70d8c1518284b"
        }
    }
}
