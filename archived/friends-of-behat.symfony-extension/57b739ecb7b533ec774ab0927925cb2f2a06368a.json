{
    "manifests": {
        "friends-of-behat/symfony-extension": {
            "manifest": {
                "bundles": {
                    "FriendsOfBehat\\SymfonyExtension\\Bundle\\FriendsOfBehatSymfonyExtensionBundle": [
                        "test"
                    ]
                },
                "copy-from-recipe": {
                    "behat.dist.php": "behat.dist.php",
                    "config/": "%CONFIG_DIR%/",
                    "features/": "features/",
                    "tests/": "tests/"
                },
                "add-lines": [
                    {
                        "file": ".dockerignore",
                        "content": "etc/",
                        "position": "bottom",
                        "warn_if_missing": true
                    },
                    {
                        "file": ".dockerignore",
                        "content": "features/",
                        "position": "bottom",
                        "warn_if_missing": true
                    }
                ],
                "gitignore": [
                    "/behat.php"
                ]
            },
            "files": {
                "behat.dist.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Behat\\Config\\Config;",
                        "use Behat\\Config\\Extension;",
                        "use Behat\\Config\\Filter\\TagFilter;",
                        "use Behat\\Config\\Formatter\\PrettyFormatter;",
                        "use Behat\\Config\\Profile;",
                        "use Behat\\MinkExtension\\ServiceContainer\\MinkExtension;",
                        "use Behat\\Testwork\\Output\\Printer\\Factory\\OutputFactory;",
                        "use FriendsOfBehat\\SymfonyExtension\\ServiceContainer\\SymfonyExtension;",
                        "",
                        "$profile = (new Profile('default'))",
                        "    ->withFormatter(",
                        "        (new PrettyFormatter(paths: false))",
                        "            ->withOutputVerbosity(OutputFactory::VERBOSITY_VERBOSE)",
                        "    )",
                        "    ->withFilter(new TagFilter('~@todo'))",
                        "",
                        "    # Extensions",
                        "    ->withExtension(new Extension(SymfonyExtension::class, [",
                        "        'bootstrap' => 'tests/bootstrap.php',",
                        "    ]))",
                        ";",
                        "",
                        "return (new Config())",
                        "    ->import('config/behat/suites.php')",
                        "    ->withProfile($profile)",
                        ";",
                        ""
                    ],
                    "executable": false
                },
                "config/behat/suites.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Behat\\Config\\Config;",
                        "",
                        "return (new Config())",
                        "    ->import([",
                        "",
                        "    ])",
                        ";",
                        ""
                    ],
                    "executable": false
                },
                "config/behat/suites/.gitiginore": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "config/services_test.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use App\\Tests\\Mock\\HttpFoundation\\MockRequestStack;",
                        "use App\\Tests\\Behat\\Client\\ApiPlatformClient;",
                        "use App\\Tests\\Behat\\Client\\RequestFactory;",
                        "use Behat\\Behat\\Context\\Context;",
                        "use FriendsOfBehat\\PageObjectExtension\\Page\\SymfonyPageInterface;",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "use Symfony\\Component\\HttpFoundation\\Session\\SessionFactoryInterface;",
                        "",
                        "use function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\service;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->parameters()",
                        "        ->set('locale', 'en_US')",
                        "    ;",
                        "",
                        "    $services = $containerConfigurator->services()",
                        "        ->defaults()",
                        "        ->autowire()",
                        "        ->autoconfigure()",
                        "    ;",
                        "",
                        "    $services->load('App\\\\Tests\\\\Behat\\\\', __DIR__.'/../tests/Behat/');",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "features/demo.feature": {
                    "contents": [
                        "# This file contains a user story for demonstration only.",
                        "# Learn how to get started with Behat and BDD on Behat's website:",
                        "# http://behat.org/en/latest/quick_start.html",
                        "",
                        "Feature:",
                        "  In order to prove that the Behat Symfony extension is correctly installed",
                        "  As a user",
                        "  I want to have a demo scenario",
                        "",
                        "  Scenario: It receives a response from Symfony's kernel",
                        "    When a demo scenario sends a request to \"/\"",
                        "    Then the response should be received",
                        ""
                    ],
                    "executable": false
                },
                "tests/Behat/DemoContext.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Tests\\Behat;",
                        "",
                        "use Behat\\Behat\\Context\\Context;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\HttpKernel\\KernelInterface;",
                        "",
                        "/**",
                        " * This context class contains the definitions of the steps used by the demo",
                        " * feature file. Learn how to get started with Behat and BDD on Behat's website.",
                        " *",
                        " * @see http://behat.org/en/latest/quick_start.html",
                        " */",
                        "final class DemoContext implements Context",
                        "{",
                        "    /** @var KernelInterface */",
                        "    private $kernel;",
                        "",
                        "    /** @var Response|null */",
                        "    private $response;",
                        "",
                        "    public function __construct(KernelInterface $kernel)",
                        "    {",
                        "        $this->kernel = $kernel;",
                        "    }",
                        "",
                        "    /**",
                        "     * @When a demo scenario sends a request to :path",
                        "     */",
                        "    public function aDemoScenarioSendsARequestTo(string $path): void",
                        "    {",
                        "        $this->response = $this->kernel->handle(Request::create($path, 'GET'));",
                        "    }",
                        "",
                        "    /**",
                        "     * @Then the response should be received",
                        "     */",
                        "    public function theResponseShouldBeReceived(): void",
                        "    {",
                        "        if ($this->response === null) {",
                        "            throw new \\RuntimeException('No response received');",
                        "        }",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "57b739ecb7b533ec774ab0927925cb2f2a06368a"
        }
    }
}
