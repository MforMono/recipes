{
    "manifests": {
        "symfony/messenger": {
            "manifest": {
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/",
                    "src/": "%SRC_DIR%/"
                },
                "env": {
                    "#1": "Choose one of the transports below",
                    "#2": "MESSENGER_TRANSPORT_DSN=amqp://guest:guest@localhost:5672/%2f/messages",
                    "#3": "MESSENGER_TRANSPORT_DSN=redis://localhost:6379/messages",
                    "MESSENGER_TRANSPORT_DSN": "doctrine://default?auto_setup=0"
                },
                "conflict": {
                    "symfony/framework-bundle": "<4.3"
                },
                "post-install-output": [
                    "  * You're ready to use the Messenger component. You can define your own message buses",
                    "    or start using the default one right now by injecting the <info>message_bus</info> service",
                    "    or type-hinting <info>Symfony\\Component\\Messenger\\MessageBusInterface</info> in your code.",
                    "",
                    "  * To send messages to a transport and handle them asynchronously:",
                    "",
                    "    1. Update the <info>MESSENGER_TRANSPORT_DSN</> env var in <comment>.env</> if needed",
                    "       and <info>framework.messenger.transports.async</> in <comment>config/packages/messenger.yaml</>;",
                    "    2. (if using Doctrine) Generate a Doctrine migration <info>bin/console doctrine:migration:diff</>",
                    "       and execute it <info>bin/console doctrine:migration:migrate</>",
                    "    3. Route your message classes to the async transport in <comment>config/packages/messenger.yaml</>.",
                    "",
                    "  * <fg=blue>Read</> the documentation at <comment>https://symfony.com/doc/current/messenger.html</>"
                ]
            },
            "files": {
                "config/packages/messenger.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use App\\Account\\Common\\Account\\Application\\Operation\\Write\\Edit\\AccountWasEdited;",
                        "use App\\Account\\Common\\Contract\\Application\\Operation\\Write\\Edit\\ContractWasEdited;",
                        "use App\\Account\\Common\\Organization\\Application\\Operation\\Write\\Edit\\OrganizationWasEdited;",
                        "use App\\Declaration\\Common\\Declaration\\Application\\Operation\\Write\\SendStatusToERP;",
                        "use App\\Declaration\\Common\\Statement\\Application\\Operation\\Write\\Add\\SendStatementToERP;",
                        "use App\\Shared\\Application\\Operation\\SendEmail\\SendEmail;",
                        "use App\\Security\\Shared\\Application\\Operation\\SendEmail\\SendAuthCode;",
                        "use App\\Declaration\\Setup\\RemoteEvent\\AllowChangesOnDeclaration;",
                        "use App\\Declaration\\Setup\\RemoteEvent\\CancelDeclaration;",
                        "use App\\Declaration\\Setup\\RemoteEvent\\CompleteDeclaration;",
                        "use App\\Declaration\\Setup\\RemoteEvent\\CreateDeclarationContract;",
                        "use App\\Declaration\\Setup\\RemoteEvent\\CloseDeclarationContract;",
                        "use App\\Declaration\\Setup\\RemoteEvent\\OpenDeclarationContract;",
                        "use App\\Declaration\\Setup\\RemoteEvent\\RequestChangesOnDeclaration;",
                        "use App\\Account\\Setup\\Application\\RemoteEvent\\ImportContractFromCode;",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->extension('framework', [",
                        "        'messenger' => [",
                        "            'default_bus' => 'command.bus',",
                        "            'failure_transport' => 'failed',",
                        "            'transports' => [",
                        "                'failed' => [",
                        "                    'dsn' => '%env(MESSENGER_TRANSPORT_DSN)%',",
                        "                    'options' => [",
                        "                        'exchange' => [",
                        "                            'name' => 'exchange_failed',",
                        "                            'type' => 'direct',",
                        "                        ],",
                        "                        'queues' => [",
                        "                            'failed' => 'failed',",
                        "                        ],",
                        "                    ],",
                        "                ],",
                        "            ],",
                        "            'routing'  => [",
                        "            ],",
                        "            'buses' => [",
                        "                'command.bus' => null,",
                        "                'query.bus' => null,",
                        "                'event.bus' => [",
                        "                    'default_middleware' => 'allow_no_handlers',",
                        "                ],",
                        "            ],",
                        "        ],",
                        "    ]);",
                        "",
                        "    if ('test' === $containerConfigurator->env()) {",
                        "        $containerConfigurator->extension('framework', [",
                        "            'messenger' => [",
                        "                'transports' => [",
                        "                    # replace with your transport name here (e.g., my_transport: 'in-memory://')",
                        "                    # For more Messenger testing tools, see https://github.com/zenstruck/messenger-test",
                        "                    'async' => 'in-memory://',",
                        "                ],",
                        "            ],",
                        "        ]);",
                        "    }",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/MessageBus/AsyncEventBus.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\MessageBus;",
                        "",
                        "use Symfony\\Component\\Messenger\\Envelope;",
                        "use Symfony\\Component\\Messenger\\HandleTrait;",
                        "use Symfony\\Component\\Messenger\\MessageBusInterface;",
                        "",
                        "final class AsyncEventBus implements EventBusInterface",
                        "{",
                        "    use HandleTrait;",
                        "",
                        "    public function __construct(",
                        "        private readonly MessageBusInterface $eventBus,",
                        "    ) {",
                        "    }",
                        "",
                        "    /**",
                        "     * @param Envelope|object $event",
                        "     */",
                        "    #[\\Override]",
                        "    public function __invoke($event): mixed",
                        "    {",
                        "        return $this->eventBus->dispatch($event);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/MessageBus/CommandBusInterface.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\MessageBus;",
                        "",
                        "use Symfony\\Component\\Messenger\\Envelope;",
                        "",
                        "interface CommandBusInterface",
                        "{",
                        "    /**",
                        "     * @param Envelope|object $command",
                        "     */",
                        "    public function __invoke($command): mixed;",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/MessageBus/EventBusInterface.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\MessageBus;",
                        "",
                        "use Symfony\\Component\\Messenger\\Envelope;",
                        "",
                        "interface EventBusInterface",
                        "{",
                        "    /**",
                        "     * @param Envelope|object $event",
                        "     */",
                        "    public function __invoke($event): mixed;",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/MessageBus/QueryBusInterface.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\MessageBus;",
                        "",
                        "use Symfony\\Component\\Messenger\\Envelope;",
                        "",
                        "interface QueryBusInterface",
                        "{",
                        "    /**",
                        "     * @param Envelope|object $query",
                        "     */",
                        "    public function __invoke($query): mixed;",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/MessageBus/SyncCommandBus.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\MessageBus;",
                        "",
                        "use Symfony\\Component\\Messenger\\Envelope;",
                        "use Symfony\\Component\\Messenger\\HandleTrait;",
                        "use Symfony\\Component\\Messenger\\MessageBusInterface;",
                        "",
                        "final class SyncCommandBus implements CommandBusInterface",
                        "{",
                        "    use HandleTrait;",
                        "",
                        "    public function __construct(",
                        "        /** @phpstan-ignore-next-line */",
                        "        private readonly MessageBusInterface $commandBus,",
                        "    ) {",
                        "        $this->messageBus = $commandBus;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param Envelope|object $command",
                        "     */",
                        "    #[\\Override]",
                        "    public function __invoke($command): mixed",
                        "    {",
                        "        return $this->handle($command);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/MessageBus/SyncQueryBus.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\MessageBus;",
                        "",
                        "use Symfony\\Component\\Messenger\\Envelope;",
                        "use Symfony\\Component\\Messenger\\HandleTrait;",
                        "use Symfony\\Component\\Messenger\\MessageBusInterface;",
                        "",
                        "final class SyncQueryBus implements QueryBusInterface",
                        "{",
                        "    use HandleTrait;",
                        "",
                        "    public function __construct(",
                        "        /** @phpstan-ignore-next-line */",
                        "        private readonly MessageBusInterface $queryBus,",
                        "    ) {",
                        "        $this->messageBus = $queryBus;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param Envelope|object $query",
                        "     */",
                        "    #[\\Override]",
                        "    public function __invoke($query): mixed",
                        "    {",
                        "        return $this->handle($query);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "681b2e3ce4eda429e448337c5233fb32be37257a"
        }
    }
}
