{
    "manifests": {
        "symfony/mailer": {
            "manifest": {
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/",
                    "src/": "%SRC_DIR%/"
                },
                "env": {
                    "MAILER_DSN": "null://null"
                },
                "docker-compose": {
                    "compose.override.yaml": {
                        "services": [
                            "mailer:",
                            "  image: axllent/mailpit",
                            "  ports:",
                            "    - \"1025\"",
                            "    - \"8025\"",
                            "  environment:",
                            "    MP_SMTP_AUTH_ACCEPT_ANY: 1",
                            "    MP_SMTP_AUTH_ALLOW_INSECURE: 1"
                        ]
                    }
                },
                "post-install-output": [
                    "  * You're ready to send emails.",
                    "",
                    "  * If you want to send emails via a supported email provider, install",
                    "    the corresponding bridge.",
                    "    For instance, <info>composer require mailgun-mailer</> for Mailgun.",
                    "",
                    "  * If you want to send emails asynchronously:",
                    "",
                    "    1. Install the messenger component by running <info>composer require messenger</>;",
                    "    2. Add <info>'Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage': amqp</> to the",
                    "       <info>config/packages/messenger.yaml</> file under <info>framework.messenger.routing</>",
                    "       and replace <info>amqp</> with your transport name of choice.",
                    "",
                    "  * <fg=blue>Read</> the documentation at <comment>https://symfony.com/doc/master/mailer.html</>"
                ]
            },
            "files": {
                "config/packages/mailer.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->extension('framework', [",
                        "        'mailer' => [",
                        "            'dsn' => '%env(MAILER_DSN)%',",
                        "        ],",
                        "    ]);",
                        "",
                        "    if ('test' === $containerConfigurator->env()) {",
                        "        $containerConfigurator->extension('framework', [",
                        "            'mailer' => [",
                        "                'dsn' => 'null://null',",
                        "            ],",
                        "        ]);",
                        "    }",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/Mailer/Email.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Mailer;",
                        "",
                        "use Symfony\\Component\\Mime\\Address;",
                        "",
                        "final readonly class Email",
                        "{",
                        "    public function __construct(",
                        "        private Address $receiverEmail,",
                        "        private string $subject,",
                        "        private string $textTemplate,",
                        "        private string $htmlTemplate,",
                        "        private array $parameters,",
                        "    ) {",
                        "    }",
                        "",
                        "    public function getReceiverEmail(): Address",
                        "    {",
                        "        return $this->receiverEmail;",
                        "    }",
                        "",
                        "    public function getSubject(): string",
                        "    {",
                        "        return $this->subject;",
                        "    }",
                        "",
                        "    public function getTextTemplate(): string",
                        "    {",
                        "        return $this->textTemplate;",
                        "    }",
                        "",
                        "    public function getHtmlTemplate(): string",
                        "    {",
                        "        return $this->htmlTemplate;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return mixed[]",
                        "     */",
                        "    public function getParameters(): array",
                        "    {",
                        "        return $this->parameters;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/Mailer/MailerInterface.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Mailer;",
                        "",
                        "use Symfony\\Component\\Mime\\Address;",
                        "",
                        "interface MailerInterface",
                        "{",
                        "    public function send(Email $email, array|null $files = null): bool;",
                        "",
                        "    public function getSender(): Address;",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/Mailer/SymfonyMailer.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Mailer;",
                        "",
                        "use League\\Flysystem\\FilesystemOperator;",
                        "use Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail;",
                        "use Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;",
                        "use Symfony\\Component\\Mailer\\MailerInterface as SymfonyMailerInterface;",
                        "use Symfony\\Component\\Mime\\Address;",
                        "use Symfony\\Component\\Mime\\Part\\DataPart;",
                        "use Symfony\\Contracts\\Translation\\TranslatorInterface;",
                        "",
                        "class SymfonyMailer implements MailerInterface",
                        "{",
                        "    public function __construct(",
                        "        private readonly SymfonyMailerInterface $mailer,",
                        "        private readonly TranslatorInterface $translator,",
                        "        private readonly string $senderEmail,",
                        "        private readonly string $senderName,",
                        "        private readonly FilesystemOperator $filesystemOperator,",
                        "    ) {",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function getSender(): Address",
                        "    {",
                        "        return new Address($this->senderEmail, $this->senderName);",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function send(Email $email, array|null $files = null): bool",
                        "    {",
                        "        $mail = (new TemplatedEmail())",
                        "            ->from($this->getSender())",
                        "            ->to($email->getReceiverEmail())",
                        "            ->subject($this->translator->trans(",
                        "                $email->getSubject(),",
                        "                $email->getParameters(),",
                        "                'emails',",
                        "            ))",
                        "            ->htmlTemplate($email->getHtmlTemplate())",
                        "            ->textTemplate($email->getTextTemplate())",
                        "            ->context($email->getParameters())",
                        "        ;",
                        "",
                        "        if (null !== $files) {",
                        "            foreach ($files as $file) {",
                        "                $mail->addPart(",
                        "                    new DataPart(",
                        "                        $this->filesystemOperator->read($file),",
                        "                        $file,",
                        "                    )",
                        "                );",
                        "            }",
                        "        }",
                        "",
                        "        try {",
                        "            $this->mailer->send($mail);",
                        "        } catch (TransportExceptionInterface) {",
                        "            return false;",
                        "        }",
                        "",
                        "        return true;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "a50de6f0196dbfca7e2c745a0a2b5f2c79e4215c"
        }
    }
}
